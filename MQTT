#include <WiFi.h>
#include <PubSubClient.h>

#define UART_RX 6  // RX pin for ESP-NOW Gateway communication
#define UART_TX 7  // TX pin for ESP-NOW Gateway communication

const char* ssid = "xxxxxx";
const char* password = "xxxxxxx";
const char* mqtt_server = "192.168.0.21";
const char* mqtt_user = "xxxxx";
const char* mqtt_pass = "xxxxx";

WiFiClient espClient;
PubSubClient client(espClient);

void callback(char* topic, byte* payload, unsigned int length) {
    String message = "";
    for (int i = 0; i < length; i++) {
        message += (char)payload[i];
    }

    Serial.println("[MQTT] Received Command: " + message);
    Serial1.println(message);  // ✅ Forward to ESP-NOW Gateway
}

void sendRelayStatusToMQTT(int relay, String state) {
    String topic = "home/relay/status/" + String(relay);
    client.publish(topic.c_str(), state.c_str());
    Serial.println("[MQTT] Published -> " + topic + ": " + state);
}

void readFromESPNowGateway() {
    if (Serial1.available()) {
        String receivedData = Serial1.readStringUntil('\n');
        receivedData.trim();
        Serial.println("[UART] Received Raw Data: " + receivedData);

        int splitIndex = receivedData.indexOf(',');
        if (splitIndex > 0) {
            int relay = receivedData.substring(0, splitIndex).toInt();
            String state = receivedData.substring(splitIndex + 1);
            
            if ((state == "ON") || (state == "OFF")) {
                Serial.println("[UART] Parsed -> Relay: " + String(relay) + " State: " + state);
                sendRelayStatusToMQTT(relay, state);
            } else {
                Serial.println("[UART] ❌ Invalid state format: " + state);
            }
        } else {
            Serial.println("[UART] ❌ Invalid data format from ESP-NOW Gateway!");
        }
    }
}

void reconnect() {
    while (!client.connected()) {
        Serial.print("[MQTT] Attempting to connect...");
        if (client.connect("ESP32C3_MQTT", mqtt_user, mqtt_pass)) {
            Serial.println(" connected!");
            client.subscribe("home/relay/command");
        } else {
            Serial.print(" failed, rc=");
            Serial.print(client.state());
            Serial.println(" retrying in 5 seconds...");
            delay(5000);
        }
    }
}

void setup() {
    Serial.begin(115200);
    Serial1.begin(115200, SERIAL_8N1, UART_RX, UART_TX);

    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("[WiFi] Connecting...");
    }
    Serial.println("[WiFi] Connected!");

    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);
}

void loop() {
    if (!client.connected()) {
        reconnect();
    }
    client.loop();
    readFromESPNowGateway();
}
